/******************
 Problem #: 8

 Author: Jared Morrison

 Prompt:
    "The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.
     Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
     What is the value of this product?"

        73167176531348624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523864850715693290963295227444843557
        66896648950445244523161731856404898711121722383113
        62229893423380488135336276614282806444486645238749
        48358907296290491560440772390713810515859487960866
        70172427121883998797908792274921901699720888093776
        65727334801053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928248863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981248987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257548420752963450

 Start Date: 04/17/2024 06:07 pm
 Completion: 04/17/2024 06:41 pm
 Answer: 23514624000
 ******************/

#include <iostream>
#include <string>
using namespace std;

const string NUMBER = "73167176531348624919225119674426574742355349194934"
                      "96983520312774506326239578318016984801869478851843"
                      "85861560789112949495459501737958331952853208805511"
                      "12540698747158523864850715693290963295227444843557"
                      "66896648950445244523161731856404898711121722383113"
                      "62229893423380488135336276614282806444486645238749"
                      "48358907296290491560440772390713810515859487960866"
                      "70172427121883998797908792274921901699720888093776"
                      "65727334801053367881220235421809751254540594752243"
                      "52584907711670556013604839586446706324415722155397"
                      "53697817977846174064955149290862569321978468622482"
                      "83972241375657056057490261407972968652414535100474"
                      "82166370484403199890008895243450658541227588666881"
                      "16427171479924442928248863465674813919123162824586"
                      "17866458359124566529476545682848912883142607690042"
                      "24219022671055626321111109370544217506941658960408"
                      "07198403850962455444362981248987879927244284909188"
                      "84580156166097919133875499200524063689912560717606"
                      "05886116467109405077541002256983155200055935729725"
                      "71636269561882670428252483600823257548420752963450";

int largestProduct(int windowSize);

int main() {

    largestProduct(13);

    return 0;
}


int largestProduct(int windowSize){
    long int max = 0;
    long int currProduct = 1;
    for (int i = 0; i < NUMBER.size() - (windowSize - 1); i++){
        for (int j = 0; j < windowSize; j++){
            currProduct *= (int)NUMBER[i + j] - 48;
        }
        max = currProduct > max ? currProduct : max;
        currProduct = 1;
    }
    cout << max << endl;
}